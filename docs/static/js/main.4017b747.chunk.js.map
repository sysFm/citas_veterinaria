{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","cita","eliminarCita","className","mascota","propietario","fecha","hora","sintomas","onClick","id","Formulario","crearCita","useState","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","onSubmit","preventDefault","trim","uuidv4","type","placeholder","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4017b747.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Cita = ({ cita, eliminarCita }) => (\r\n\r\n    <Fragment>\r\n\r\n        <div className='cita'>\r\n\r\n            <p>Mascota: <span>{cita.mascota}</span> </p>\r\n            <p>Dueño: <span>{cita.propietario}</span> </p>\r\n            <p>Fecha: <span>{cita.fecha}</span> </p>\r\n            <p>Hora: <span>{cita.hora}</span> </p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span> </p>\r\n\r\n            <button className=\"button eliminar u-full-width\" onClick={() => eliminarCita(cita.id)} >Eliminar &times;</button>\r\n        </div>\r\n\r\n    </Fragment>\r\n\r\n);\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\nexport default Cita;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n//useState permite tener estados\r\n\r\n//Formulario recibe un props\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n\r\n    //Crear estate de citas \r\n\r\n    const [cita, actualizarCita] = useState(\r\n        //Se crea un objetao para guardar todos los campos del formulario \r\n        //Todos los campos se inicializan vacios \r\n        {\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        }\r\n    );\r\n\r\n\r\n    const [error, actualizarError] = useState(false);\r\n    //Funcion que se ejecuta cada vez que escribe en un input y captura los datos ingresados en cada inout\r\n\r\n    const actualizarState = (e) => {\r\n        // console.log(e.target.name)\r\n\r\n        actualizarCita({\r\n            //mantiene el valor anterior y lo actualiza cada vez que cambia el valor de los input \r\n            ...cita, [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //Extraer los valores utilizando la desestructuracion del objeto\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    //Funcion utilizada cuando el usuario presiona enter\r\n    const submitCita = (e) => {\r\n        e.preventDefault();\r\n\r\n        //Validacion de datos\r\n        if (mascota.trim() === '' ||\r\n            propietario.trim() === '' ||\r\n            fecha.trim() === '' ||\r\n            hora.trim() === '' ||\r\n            sintomas.trim() === '') {\r\n\r\n            actualizarError(true);\r\n            //Se agrega el return para evitar que se siga ejecutando el codigo \r\n            return;\r\n        }\r\n        //ELimiar el mensaje de validacion\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID utilizando la libreria UUID\r\n        //Se modifica el objeto y se agrega el id\r\n        cita.id = uuidv4();\r\n\r\n        //Crear cita \r\n        crearCita(cita);\r\n\r\n        //Reiniciar formulario\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear citas</h2>\r\n\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null\r\n\r\n            }\r\n\r\n            <form onSubmit={submitCita} >\r\n                <label>Nombre Mascota</label>\r\n                <input type=\"text\" name=\"mascota\" className=\"u-full-width\" placeholder=\"Nombre Mascota\" onChange={actualizarState} value={mascota} />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input type=\"text\" name=\"propietario\" className=\"u-full-width\" placeholder=\"Nombre Dueño de la mascota\" onChange={actualizarState} value={propietario} />\r\n\r\n                <label>Fecha</label>\r\n                <input type=\"date\" name=\"fecha\" className=\"u-full-width\" onChange={actualizarState} value={fecha} />\r\n\r\n                <label>Hora</label>\r\n                <input type=\"time\" name=\"hora\" className=\"u-full-width\" onChange={actualizarState} value={hora} />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea className=\"u-full-width\" name=\"sintomas\" onChange={actualizarState} value={sintomas}></textarea>\r\n\r\n                <button type=\"submit\" className=\"u-full-width button-primary\" >Agregar Cita</button>\r\n            </form>\r\n\r\n        </Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\n//Los PropTypes especifica que valor recibira el componente\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","import React, { Fragment, useState, useEffect } from 'react';\nimport Cita from './components/Cita';\nimport Formulario from './components/Formulario';\nfunction App() {\n\n  //Ciatas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //Arreglo de citas \n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //Use effect para realizar ciertas operaciones cuando el state cambia (siempre es un funcion de flecha )\n  //El use effect se ejecuta cuando el componente esta listo o se modifica \n  //Para que se ejecute solo una vez hay que enviar un arreglo vacio sino se va a ciclar \n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  //Funcion que toma las citas actuales y agrega las nuevas \n  const crearCita = (cita) => {\n    guardarCitas([\n      ...citas, cita\n    ]);\n  }\n\n  //Funcion que elimina una cita por su ID\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //Mensaje condicional\n\n  const titulo = citas.length === 0 ? 'No hay citas!' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n      <h1>Veterinaria</h1>\n      <h2>Administrador de citas de mascotas</h2>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {\n              citas.map(cita => (\n                <Cita\n                  key={cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n\n              ))\n            }\n\n\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}